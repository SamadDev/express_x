import 'package:flutter/material.dart';

String _appTheme = "primary";

class ThemeHelper {
  Map<String, PrimaryColors> _supportedCustomColor = {'primary': PrimaryColors()};

  Map<String, ColorScheme> _supportedColorScheme = {'primary': ColorSchemes.primaryColorScheme};

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  PrimaryColors _getThemeColors() {
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme = _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray10001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black900.withOpacity(0.1),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: Color(0XFF666666),
          fontSize: 16,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 14,
          fontFamily: 'Satoshi',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 12,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: Color(0XFF131313),
          fontSize: 31,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 24,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 13,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 11,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 22,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 16,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 14,
          fontFamily: 'Satoshi',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF1D2089),
    primaryContainer: Color(0XFF808080),

    // Error colors
    errorContainer: Color(0XFF892929),
    onErrorContainer: Color(0XE5FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFFD9D9D9),
    onPrimaryContainer: Color(0XFF131213),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber700 => Color(0XFFE29F02);

  // Black
  Color get black900 => Color(0XFF000000);

  // DeepOrange
  Color get deepOrangeA700 => Color(0XFFDE2910);

  // Gray
  Color get gray100 => Color(0XFFF3F3F3);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray20001 => Color(0XFFECECEC);
  Color get gray400 => Color(0XFFB3B3B3);
  Color get gray40001 => Color(0XFFBFBEBE);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray5001 => Color(0XFFFBFBFB);
  Color get gray5002 => Color(0XFFF8F8F8);
  Color get gray5003 => Color(0XFFFCF7FF);
  Color get gray5004 => Color(0XFFFAFAFA);
  Color get gray700 => Color(0XFF666666);
  Color get gray900 => Color(0XFF131313);

  // Green
  Color get green800 => Color(0XFF097B37);

  // LightBlue
  Color get lightBlue900 => Color(0XFF005596);

  // LightGreen
  Color get lightGreen900 => Color(0XFF1C7F15);

  // Red
  Color get redA700 => Color(0XFFDF0414);

  // White
  Color get whiteA700 => Color(0XFFFEFEFE);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
